<% layout("layouts/main") %> <%- include("layouts/clubDetails", { club, user,
currentTab: "about" }) %>

<div class="container mx-auto">
  <div id="tabContent">
    <div class="tab-pane" id="about">
      <!-- Edit/View Toggle Buttons (only visible to moderators/admins) -->
      <% if (isClubMod) { %>
      <div class="flex items-center justify-between mb-4">
        <div class="flex gap-2">
          <button
            id="viewModeBtn"
            class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors active-tab"
          >
            <i class="fas fa-eye mr-2"></i>Preview
          </button>
          <button
            id="editModeBtn"
            class="px-4 py-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors"
          >
            <i class="fas fa-edit mr-2"></i>Edit
          </button>
        </div>
        <div id="editActions" class="flex gap-2" style="display: none">
          <button
            id="saveBtn"
            class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
            disabled
          >
            <i class="fas fa-save mr-2"></i>Save
          </button>
          <button
            id="cancelBtn"
            class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
          >
            <i class="fas fa-times mr-2"></i>Cancel
          </button>
        </div>
      </div>
      <% } %>

      <!-- View Mode (Default) -->
      <div id="viewMode" class="view-mode">
        <div
          class="text-gray-700 text-base leading-relaxed prose prose-blue max-w-none"
        >
          <%- aboutHtml %>
        </div>
      </div>

      <!-- Edit Mode (Hidden by default) -->
      <% if (isClubMod) { %>
      <div id="editMode" class="edit-mode" style="display: none">
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <!-- Editor Panel -->
          <div class="space-y-4">
            <div class="flex items-center justify-between">
              <h3 class="text-lg font-semibold text-gray-800">
                <i class="fas fa-edit mr-2"></i>Edit Content
              </h3>
              <div class="text-sm text-gray-500">
                <i class="fab fa-markdown mr-1"></i>Markdown supported
              </div>
            </div>
            <textarea
              id="markdownEditor"
              class="w-full h-96 p-4 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-sm"
              placeholder="Write your club's about section using Markdown..."
            >
<%= club.about || club.description || '' %></textarea
            >

            <!-- Markdown Help -->
            <div class="text-xs text-gray-500 space-y-1">
              <div><strong>Quick Reference:</strong></div>
              <div>
                <code># Heading 1</code> • <code>## Heading 2</code> •
                <code>**bold**</code> • <code>*italic*</code>
              </div>
              <div>
                <code>- List item</code> • <code>[Link](url)</code> •
                <code>`code`</code> • <code>> Quote</code>
              </div>
            </div>
          </div>

          <!-- Preview Panel -->
          <div class="space-y-4">
            <h3 class="text-lg font-semibold text-gray-800">
              <i class="fas fa-eye mr-2"></i>Live Preview
            </h3>
            <div
              id="markdownPreview"
              class="h-96 p-4 border border-gray-200 rounded-lg overflow-y-auto bg-gray-50 text-gray-700 text-base leading-relaxed prose prose-blue max-w-none"
            >
              <!-- Live preview will be rendered here -->
            </div>
          </div>
        </div>
      </div>
      <% } %>
    </div>
  </div>
  <a href="/club" class="inline-block mt-4 text-blue-600 hover:underline"
    >&larr; Back to Clubs</a
  >
</div>

<% if (isClubMod) { %>
<!-- Markdown Parser -->
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const viewModeBtn = document.getElementById("viewModeBtn");
    const editModeBtn = document.getElementById("editModeBtn");
    const viewMode = document.getElementById("viewMode");
    const editMode = document.getElementById("editMode");
    const editActions = document.getElementById("editActions");
    const markdownEditor = document.getElementById("markdownEditor");
    const markdownPreview = document.getElementById("markdownPreview");
    const saveBtn = document.getElementById("saveBtn");
    const cancelBtn = document.getElementById("cancelBtn");

    let originalContent = markdownEditor.value;
    let hasChanges = false;

    // Initialize preview
    updatePreview();

    // Tab switching
    viewModeBtn.addEventListener("click", function () {
      if (
        hasChanges &&
        !confirm(
          "You have unsaved changes. Are you sure you want to switch to preview mode?"
        )
      ) {
        return;
      }
      switchToViewMode();
    });

    editModeBtn.addEventListener("click", function () {
      switchToEditMode();
    });

    // Editor change detection
    markdownEditor.addEventListener("input", function () {
      hasChanges = markdownEditor.value !== originalContent;
      saveBtn.disabled = !hasChanges;
      updatePreview();
    });

    // Save functionality
    saveBtn.addEventListener("click", function () {
      if (!hasChanges) return;

      const newContent = markdownEditor.value;
      saveBtn.disabled = true;
      saveBtn.innerHTML =
        '<i class="fas fa-spinner fa-spin mr-2"></i>Saving...';

      fetch(`/club/<%= club._id %>/edit-about`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ about: newContent }),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            originalContent = newContent;
            hasChanges = false;
            // Update the view mode content
            document.querySelector("#viewMode .prose").innerHTML =
              data.htmlContent;
            // Show success message
            showMessage("Changes saved successfully!", "success");
            switchToViewMode();
          } else {
            throw new Error(data.message || "Failed to save changes");
          }
        })
        .catch((error) => {
          console.error("Error saving content:", error);
          showMessage("Failed to save changes. Please try again.", "error");
        })
        .finally(() => {
          saveBtn.disabled = false;
          saveBtn.innerHTML = '<i class="fas fa-save mr-2"></i>Save';
        });
    });

    // Cancel functionality
    cancelBtn.addEventListener("click", function () {
      if (
        hasChanges &&
        !confirm("You have unsaved changes. Are you sure you want to cancel?")
      ) {
        return;
      }
      markdownEditor.value = originalContent;
      hasChanges = false;
      saveBtn.disabled = true;
      updatePreview();
      switchToViewMode();
    });

    function switchToViewMode() {
      viewMode.style.display = "block";
      editMode.style.display = "none";
      editActions.style.display = "none";
      viewModeBtn.classList.add("active-tab", "bg-gray-200", "text-gray-700");
      viewModeBtn.classList.remove("bg-gray-100", "text-gray-600");
      editModeBtn.classList.remove(
        "active-tab",
        "bg-gray-200",
        "text-gray-700"
      );
      editModeBtn.classList.add("bg-gray-100", "text-gray-600");
    }

    function switchToEditMode() {
      viewMode.style.display = "none";
      editMode.style.display = "block";
      editActions.style.display = "flex";
      editModeBtn.classList.add("active-tab", "bg-gray-200", "text-gray-700");
      editModeBtn.classList.remove("bg-gray-100", "text-gray-600");
      viewModeBtn.classList.remove(
        "active-tab",
        "bg-gray-200",
        "text-gray-700"
      );
      viewModeBtn.classList.add("bg-gray-100", "text-gray-600");
      markdownEditor.focus();
    }

    function updatePreview() {
      const content =
        markdownEditor.value ||
        "*No content yet. Start typing to see a preview...*";
      try {
        markdownPreview.innerHTML = marked.parse(content);
      } catch (error) {
        markdownPreview.innerHTML =
          '<p class="text-red-500">Error parsing markdown</p>';
      }
    }

    function showMessage(message, type) {
      const messageDiv = document.createElement("div");
      messageDiv.className = `fixed top-20 right-4 px-6 py-3 rounded-lg shadow-lg z-50 ${
        type === "success" ? "bg-green-500 text-white" : "bg-red-500 text-white"
      }`;
      messageDiv.innerHTML = `
      <div class="flex items-center">
        <i class="fas ${
          type === "success" ? "fa-check" : "fa-exclamation-triangle"
        } mr-2"></i>
        ${message}
      </div>
    `;
      document.body.appendChild(messageDiv);

      setTimeout(() => {
        messageDiv.style.opacity = "0";
        messageDiv.style.transition = "opacity 0.3s";
        setTimeout(() => {
          document.body.removeChild(messageDiv);
        }, 300);
      }, 3000);
    }

    // Keyboard shortcuts
    markdownEditor.addEventListener("keydown", function (e) {
      // Ctrl+S / Cmd+S to save
      if ((e.ctrlKey || e.metaKey) && e.key === "s") {
        e.preventDefault();
        if (hasChanges && !saveBtn.disabled) {
          saveBtn.click();
        }
      }
      // Escape to cancel
      if (e.key === "Escape") {
        cancelBtn.click();
      }
    });
  });
</script>
<% } %>

<style>
  /* Headings */
  .prose h1,
  .prose h2,
  .prose h3,
  .prose h4,
  .prose h5,
  .prose h6 {
    color: #1d4ed8;
    font-weight: 700;
    margin-top: 1.25em;
    margin-bottom: 0.5em;
  }
  .dark .prose h1,
  .dark .prose h2,
  .dark .prose h3,
  .dark .prose h4,
  .dark .prose h5,
  .dark .prose h6 {
    color: #60a5fa;
  }
  .prose h1 {
    font-size: 2.25rem;
  }
  .prose h2 {
    font-size: 1.5rem;
  }
  .prose h3 {
    font-size: 1.25rem;
  }
  .prose h4 {
    font-size: 1.1rem;
  }
  .prose h5 {
    font-size: 1rem;
  }
  .prose h6 {
    font-size: 0.95rem;
  }
  /* Paragraphs */
  .prose p {
    margin: 0.5em 0 1em 0;
    color: #374151;
    line-height: 1.7;
  }
  .dark .prose p {
    color: #d1d5db;
  }

  /* Lists */
  .prose ul,
  .prose ol {
    margin: 1em 0 1em 1.5em;
    padding-left: 1.5em;
  }
  .prose ul {
    list-style-type: disc;
  }
  .prose ol {
    list-style-type: decimal;
  }
  .prose li {
    margin-bottom: 0.3em;
  }
  /* Blockquotes */
  .prose blockquote {
    border-left: 4px solid #3b82f6;
    background: #f1f5f9;
    color: #334155;
    padding: 0.5em 1em;
    margin: 1em 0;
    font-style: italic;
  }
  .dark .prose blockquote {
    border-left-color: #60a5fa;
    background: #1e293b;
    color: #cbd5e1;
  }
  /* Code */
  .prose code {
    background: #f3f4f6;
    color: #be185d;
    padding: 0.2em 0.4em;
    border-radius: 4px;
    font-size: 0.95em;
  }
  .dark .prose code {
    background: #374151;
    color: #f472b6;
  }
  .prose pre {
    background: #f3f4f6;
    color: #334155;
    padding: 1em;
    border-radius: 6px;
    overflow-x: auto;
    margin: 1em 0;
  }
  .dark .prose pre {
    background: #1f2937;
    color: #e5e7eb;
  }
  .prose pre code {
    background: none;
    color: inherit;
    padding: 0;
    border-radius: 0;
    font-size: inherit;
  }
  /* Links */
  .prose a {
    color: #2563eb;
    text-decoration: underline;
    transition: color 0.2s;
  }
  .prose a:hover {
    color: #1e40af;
  }
  .dark .prose a {
    color: #60a5fa;
  }
  .dark .prose a:hover {
    color: #93c5fd;
  }
  /* Tables */
  .prose table {
    width: 100%;
    border-collapse: collapse;
    margin: 1em 0;
    font-size: 1em;
  }
  .prose th,
  .prose td {
    border: 1px solid #d1d5db;
    padding: 0.5em 1em;
    text-align: left;
  }
  .prose th {
    background: #e0e7ef;
    font-weight: 600;
  }
  .prose tr:nth-child(even) td {
    background: #f9fafb;
  }
  .dark .prose th,
  .dark .prose td {
    border-color: #4b5563;
  }
  .dark .prose th {
    background: #374151;
    color: #f3f4f6;
  }
  .dark .prose tr:nth-child(even) td {
    background: #1f2937;
  }

  /* Images */
  .prose img {
    max-width: 100%;
    border-radius: 0.5em;
    margin: 1em 0;
    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.04);
  }
</style>
